using ExploitationApi.Models;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Reflection.Emit;

namespace ExploitationApi.Data
{
    public class ApiDbContext : DbContext
    {
        public ApiDbContext(DbContextOptions<ApiDbContext> options) : base(options) { }

        public DbSet<StepResource> StepResources { get; set; }
        public DbSet<Step> Steps { get; set; }
        public DbSet<Procedure> Procedures { get; set; }
        public DbSet<Service> Services { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Group> Groups { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Step -> StepResource (One-to-Many)
            modelBuilder.Entity<Step>()
                .HasMany(s => s.Ressources)
                .WithOne(sr => sr.Step)
                .HasForeignKey(sr => sr.StepId)
                .OnDelete(DeleteBehavior.Cascade); // Enable cascading delete

            // Procedure -> Step (One-to-Many)
            modelBuilder.Entity<Procedure>()
                .HasMany(p => p.Steps)
                .WithOne(s => s.Procedure)
                .HasForeignKey(s => s.ProcedureId)
                .OnDelete(DeleteBehavior.Cascade); // Enable cascading delete

            // Group -> Procedure (One-to-Many)
            modelBuilder.Entity<Group>()
                .HasMany(g => g.Procedures)
                .WithOne(p => p.Group)
                .HasForeignKey(p => p.GroupId)
                .OnDelete(DeleteBehavior.Cascade); // Enable cascading delete

            // Service -> User (One-to-Many)
            modelBuilder.Entity<Service>()
                .HasMany(s => s.Users)
                .WithOne(u => u.Service)
                .HasForeignKey(u => u.ServiceId)
                .OnDelete(DeleteBehavior.SetNull); // Set null on delete (can be changed to Cascade if desired)

            // Group -> User (Many-to-Many)
            modelBuilder.Entity<Group>()
                .HasMany(g => g.Users)
                .WithMany(u => u.Groups)
                .UsingEntity<UsersGroups>();
        }
    }

    
}
