using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Interfaces;
using ExploitationApi.Models;
using Microsoft.EntityFrameworkCore;

namespace ExploitationApi.Repositories
{
    public class UserRepo : IRepo<UserRequestDTO, User>
    {
        private readonly ApiDbContext _context;
        public UserRepo(ApiDbContext context)
        {
            _context = context;
        }

        public async Task<User?> CreateAsync(User model)
        {
            await _context.Users.AddAsync(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<User?> DeleteAsync(long id)
        {
            var model = await _context.Users.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.Users.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<User>?> GetAllAsync()
        {
            return await _context.Users.ToListAsync();
        }

        public async Task<User?> GetByIdAsync(long id)
        {
            return await _context.Users.FindAsync(id);
        }

        public async Task<User?> UpdateAsync(long id, UserRequestDTO dto)
        {
            var model = await _context.Users.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            model.Name = dto.Name;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }
        public Task<bool> IsExistAsync(long id)
        {
            return _context.Users.AnyAsync(m => m.Id == id);
        }

        public Task<bool> hasDepencies(long id)
        {
            throw new NotImplementedException();
        }
    }
}
