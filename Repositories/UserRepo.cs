using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Interfaces;
using ExploitationApi.Models;
using ExploitationApi.Services;
using Microsoft.EntityFrameworkCore;
using System.Security.Cryptography;
using System.Text;

namespace ExploitationApi.Repositories
{
    public class UserRepo : IRepo<UserRequestDTO, User>
    {
        private readonly ApiDbContext _context;
        private readonly EmailService _emailService;
        public UserRepo(ApiDbContext context, EmailService emailService)
        {
            _context = context;
            _emailService = emailService;
        }

        public async Task<User?> CreateAsync(User model)
        {
            var password = GeneratePassword();
            model.Password = password;
            await _context.Users.AddAsync(model);
            await _context.SaveChangesAsync();

            // Send email with the generated password
            var subject = "Votre compte a été créé";
            var body = $"<p>Chèr(e) {model.Name},</p><p>Votre compte a été créé avec succès. Votre mot de passe est : <strong>{password}</strong></p><p>Veuillez changer votre mot de passe après vous être connecté(e).</p>";
            await _emailService.SendEmailAsync(model.Mail, subject, body);

            return model;
        }

        public async Task<User?> DeleteAsync(long id)
        {
            var model = await _context.Users.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.Users.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<User>?> GetAllAsync()
        {
            return await _context.Users.ToListAsync();
        }

        public async Task<User?> GetByIdAsync(long id)
        {
            var us= await _context.Users.FirstOrDefaultAsync(u=>u.Id==id);
            us.Groups=await _context.Groups.Where(x=>x.Users.Any(u=>u.Id==id)).ToListAsync();
            return us;
        }

        public async Task<User?> UpdateAsync(long id, UserRequestDTO dto)
        {
            var model = await _context.Users.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            model.Name = dto.Name;
            model.Mail = dto.Mail;
            model.AccountState = dto.AccountState;
            model.ServiceId = dto.ServiceId;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }
        public Task<bool> IsExistAsync(long id)
        {
            return _context.Users.AnyAsync(m => m.Id == id);
        }

        public Task<bool> hasDepencies(long id)
        {
            throw new NotImplementedException();
        }

        public Task<bool> AssignUsersToGroupAsync(long groupId, List<long> userIds)
        {
            throw new NotImplementedException();
        }
        private string GeneratePassword(int length = 12)
        {
            const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+[]{}|;:,.<>?";
            using (var rng = new RNGCryptoServiceProvider())
            {
                var bytes = new byte[length];
                rng.GetBytes(bytes);
                var password = new StringBuilder(length);
                foreach (var b in bytes)
                {
                    password.Append(validChars[b % validChars.Length]);
                }
                return password.ToString();
            }
        }

        public async Task<User?> GetByNameAsync(string name)
        {
            return await _context.Users.FirstOrDefaultAsync(s => s.Mail == name);
        }

    }
}
