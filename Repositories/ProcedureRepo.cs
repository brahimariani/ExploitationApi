using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Interfaces;
using ExploitationApi.Models;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;

namespace ExploitationApi.Repositories
{
    public class ProcedureRepo : IRepo<ProcedureRequestDTO, Procedure>
    {
        private readonly ApiDbContext _context;
        public ProcedureRepo(ApiDbContext context)
        {
            _context = context;
        }

        public async Task<Procedure?> CreateAsync(Procedure model)
        {
            await _context.Procedures.AddAsync(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<Procedure?> DeleteAsync(long id)
        {
            var model = await _context.Procedures.Include(p => p.Steps).FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.Procedures.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<Procedure>?> GetAllAsync()
        {
            return await _context.Procedures.ToListAsync();
        }

        public async Task<Procedure?> GetByIdAsync(long id)
        {
            return await _context.Procedures.Include(p=>p.Steps).FirstOrDefaultAsync(p=>p.Id==id);
        }

        public Task<bool> hasDepencies(long id)
        {
            throw new NotImplementedException();
        }

        public Task<bool> IsExistAsync(long id)
        {
            return _context.Procedures.AnyAsync(m => m.Id == id);
        }

        public async Task<Procedure?> UpdateAsync(long id, ProcedureRequestDTO dto)
        {
            var model = await _context.Procedures.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            model.Title = dto.Title;
            model.Description = dto.Description;
            model.GroupId = dto.GroupId;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }
    }
}
