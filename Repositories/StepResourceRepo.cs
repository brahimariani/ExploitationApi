using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Interfaces;
using ExploitationApi.Models;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;

namespace ExploitationApi.Repositories
{
    public class StepResourceRepo : IRepo<StepResourceRequestDTO, StepResource>
    {
        private readonly ApiDbContext _context;

        public StepResourceRepo(ApiDbContext context)
        {
            _context = context;
            
        }

        public async Task<StepResource?> CreateAsync(StepResource model)
        {
            await _context.StepResources.AddAsync(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<StepResource?> DeleteAsync(long id)
        {
            var model = await _context.StepResources.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.StepResources.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<StepResource>?> GetAllAsync()
        {
            return await _context.StepResources.ToListAsync();
        }

        public async Task<StepResource?> GetByIdAsync(long id)
        {
            return await _context.StepResources.FindAsync(id);
        }

        public async Task<StepResource?> UpdateAsync(long id, StepResourceRequestDTO dto)
        {
            var model = await _context.StepResources.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            model.StepId = dto.StepId;
            model.Content = dto.Content;
            model.Position = dto.Position;
            model.Path = dto.Path;
            model.Type = dto.Type;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }
        public Task<bool> IsExistAsync(long id)
        {
            return _context.StepResources.AnyAsync(m => m.Id == id);
        }

        public Task<bool> hasDepencies(long id)
        {
            throw new NotImplementedException();
        }

        public Task<bool> AssignUsersToGroupAsync(long groupId, List<long> userIds)
        {
            throw new NotImplementedException();
        }

        public Task<StepResource?> GetByNameAsync(string name)
        {
            throw new NotImplementedException();
        }
    }
}
