using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Interfaces;
using ExploitationApi.Models;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;

namespace ExploitationApi.Repositories
{
    public class ServiceRepo : IRepo<ServiceRequestDTO, Service>
    {
        private readonly ApiDbContext _context;
        public ServiceRepo(ApiDbContext context)
        {
            _context = context;
        }

        public async Task<Service?> CreateAsync(Service model)
        {
            await _context.Services.AddAsync(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<Service?> DeleteAsync(long id)
        {
            var model = await _context.Services.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.Services.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<Service>?> GetAllAsync()
        {
            return await _context.Services.ToListAsync();
        }

        public async Task<Service?> GetByIdAsync(long id)
        {
            return await _context.Services.Include(s=>s.Users).FirstOrDefaultAsync(s=>s.Id==id);
        }

        public async Task<Service?> UpdateAsync(long id, ServiceRequestDTO dto)
        {
            var model = await _context.Services.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            model.Name = dto.Name;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }
        public Task<bool> IsExistAsync(long id)
        {
            return _context.Services.AnyAsync(m => m.Id == id);
        }

        public async Task<bool> hasDepencies(long id)
        {
            var model = await GetByIdAsync(id);
            if (model != null && model.Users.Any())
            {
                return true;
            }
            return false;
        }

        public Task<bool> AssignUsersToGroupAsync(long groupId, List<long> userIds)
        {
            throw new NotImplementedException();
        }

        public async Task<Service?> GetByNameAsync(string name)
        {
            return await _context.Services.Include(s => s.Users).FirstOrDefaultAsync(s => s.Name == name);
        }
    }
}
