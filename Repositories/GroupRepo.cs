using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Mappers;
using ExploitationApi.Models;
using ExploitationApi.Interfaces;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;

namespace ExploitationApi.Repositories
{
    public class GroupRepo : IRepo<GroupRequestDTO, Group>
    {
        private readonly ApiDbContext _context;
        public GroupRepo(ApiDbContext context)
        {
            _context = context;
        }

        public async Task<Group?> CreateAsync(Group model)
        {
            await _context.Groups.AddAsync(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<Group?> DeleteAsync(long id)
        {
            var model = await _context.Groups.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.Groups.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<Group>?> GetAllAsync()
        {
            return await _context.Groups.ToListAsync();
        }

        public async Task<Group?> GetByIdAsync(long id)
        {
            return await _context.Groups.Include(g => g.Procedures).Include(g=>g.Users).FirstOrDefaultAsync(g=>g.Id==id);
        }

        public Task<bool> IsExistAsync(long id)
        {
            return _context.Groups.AnyAsync(m => m.Id==id);
        }

        public async Task<Group?> UpdateAsync(long id, GroupRequestDTO dto)
        {
            var model = await _context.Groups.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null ;
            }
            model.Name = dto.Name;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }
    }
}
