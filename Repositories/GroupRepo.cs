using ExploitationApi.Data;
using ExploitationApi.DTOs;
using ExploitationApi.Mappers;
using ExploitationApi.Models;
using ExploitationApi.Interfaces;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;


namespace ExploitationApi.Repositories
{
    public class GroupRepo : IRepo<GroupRequestDTO, Group>
    {
        private readonly ApiDbContext _context;
        public GroupRepo(ApiDbContext context)
        {
            _context = context;
        }

        public async Task<Group?> CreateAsync(Group model)
        {
            await _context.Groups.AddAsync(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<Group?> DeleteAsync(long id)
        {
            var model = await _context.Groups.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null;
            }
            _context.Groups.Remove(model);
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<List<Group>?> GetAllAsync()
        {
            return await _context.Groups.ToListAsync();
        }

        public async Task<Group?> GetByIdAsync(long id)
        {
            var grps= await _context.Groups
                .Include(g=>g.Procedures)
                .FirstOrDefaultAsync(g => g.Id == id);
            grps.Users= await _context.Users.Where(u => u.Groups.Any(g => g.Id == id)).ToListAsync();
            return grps;
        }

        public Task<bool> IsExistAsync(long id)
        {
            return _context.Groups.AnyAsync(m => m.Id==id);
        }

        public async Task<Group?> UpdateAsync(long id, GroupRequestDTO dto)
        {
            var model = await _context.Groups.FirstOrDefaultAsync(x => x.Id == id);
            if (model == null)
            {
                return null ;
            }
            model.Name = dto.Name;
            model.Description = dto.Description;
            model.UpdatedAt = DateTime.Now;
            await _context.SaveChangesAsync();
            return model;
        }

        public async Task<bool> hasDepencies(long id)
        {
            var model=await GetByIdAsync(id);
            if (model !=null && model.Procedures.Any())
            {
                return true;
            }
            return false;
        }

        public async Task<bool> AssignUsersToGroupAsync(long groupId, List<long> userIds)
        {
            var group=await _context.Groups.Include(g => g.Users).FirstOrDefaultAsync(g => g.Id == groupId);
            if (group == null)
            {
                    return false;
            }

            var users = await _context.Users.Where(u => userIds.Contains(u.Id)).ToListAsync();
            group.Users = users;

            await _context.SaveChangesAsync();

            return true;
        }

        public async Task<Group?> GetByNameAsync(string name)
        {
            return await _context.Groups.FirstOrDefaultAsync(s => s.Name == name);
        }
    }
}
