using ExploitationApi.Data;
using ExploitationApi.Mappers;
using ExploitationApi.DTOs;
using ExploitationApi.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ExploitationApi.Models;

namespace ExploitationApi.Controllers
{
    [Route("api/groups")]
    [ApiController]
    public class GroupController : ControllerBase
    {
        private readonly IRepo<GroupRequestDTO,Group> _repo;
        public GroupController(IRepo<GroupRequestDTO, Group> repo)
        {
            _repo = repo;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var result = await _repo.GetAllAsync();
            var asyncResult=result.Select(r=>r.toDTO());
            return Ok(asyncResult);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById([FromRoute] long id)
        {
            var result= await _repo.GetByIdAsync(id);
            if (result == null)
            {
                return NotFound();
            }
            else
            {
                return Ok(result.toDTO());
            }
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] GroupRequestDTO value)
        {
            var model=value.toModel();
            await _repo.CreateAsync(model);
            return CreatedAtAction(nameof(GetById), new {Id=model.Id},model.toDTO());
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update([FromRoute] int id, [FromBody] GroupRequestDTO value)
        {
            var model= await _repo.UpdateAsync(id,value);
            if(model == null)
            {
                return NotFound();
            }
            return Ok(model.toDTO());
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete([FromRoute] int id)
        {
            if (await _repo.hasDepencies(id)) { 
                return BadRequest(error: "le groupe contient des procédures !");
            }
            var model =await _repo.DeleteAsync(id);
            if (model == null)
            {
                return NotFound();
            }
            return NoContent();
        }
    }
}
