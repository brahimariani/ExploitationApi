using ExploitationApi.Data;
using Microsoft.AspNetCore.Mvc;
using ExploitationApi.Mappers;
using ExploitationApi.DTOs;
using Microsoft.EntityFrameworkCore;
using ExploitationApi.Interfaces;
using ExploitationApi.Models;
using ExploitationApi.Repositories;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Authorization;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace ExploitationApi.Controllers
{
    [Authorize]
    [Route("api/resources")]
    [ApiController]
    public class StepResourceController : ControllerBase
    {
        private readonly IRepo<StepResourceRequestDTO, StepResource> _repo;
        private readonly IRepo<StepRequestDTO, Step> stepRepo;
        private readonly IWebHostEnvironment _webHostEnvironment;

        public StepResourceController(IRepo<StepResourceRequestDTO, StepResource> repo, IRepo<StepRequestDTO, Step> stepRepo, IWebHostEnvironment webHostEnvironment)
        {
            _repo = repo;
            this.stepRepo=stepRepo;
            _webHostEnvironment = webHostEnvironment;
        }
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var result = await _repo.GetAllAsync();
            var asyncResult=result.Select(r=>r.toDTO());
            return Ok(asyncResult);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById([FromRoute] long id)
        {
            var result=await _repo.GetByIdAsync(id);
            if (result == null)
            {
                return NotFound();
            }
            else
            {
                return Ok(result.toDTO());
            }
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] StepResourceRequestDTO value)
        {
            if (!await stepRepo.IsExistAsync(value.StepId))
            {
                return BadRequest(error: "L'étape n'existe pas !");
            }
            var model = value.toModel();

            await _repo.CreateAsync(model);
            return CreatedAtAction(nameof(GetById), new { Id = model.Id }, model.toDTO());
        }
        [HttpPost("uploads")]
        public async Task<IActionResult> Upload(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("No file uploaded.");
            }

            // Ensure UploadedFiles directory exists
            var uploads = Path.Combine(_webHostEnvironment.WebRootPath, "files");
            if (!Directory.Exists(uploads))
            {
                Directory.CreateDirectory(uploads);
            }

            var filePath = Path.Combine(uploads, file.FileName);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }

            return Ok(new { FilePath = $"/files/{file.FileName}" });
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update([FromRoute] int id, [FromBody] StepResourceRequestDTO value)
        {
            if (!await stepRepo.IsExistAsync(value.StepId))
            {
                return BadRequest(error: "L'étape n'existe pas !");
            }
            var model = await _repo.UpdateAsync(id, value);
            if (model == null)
            {
                return NotFound();
            }
            return Ok(model.toDTO());
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete([FromRoute] int id)
        {
            var model =await _repo.DeleteAsync(id);
            if (model == null)
            {
                return NotFound();
            }
            return NoContent();
        }
    }
}
